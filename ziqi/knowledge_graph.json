{
  "generated_at": "2025-08-10T22:33:09.997038+00:00",
  "schema": {
    "node_types": [
      "Model",
      "Issue",
      "Solution",
      "RootCause",
      "Answer"
    ],
    "edge_types": [
      "answered",
      "produced",
      "about",
      "solves",
      "implements",
      "causes"
    ]
  },
  "nodes": [
    {
      "id": "model::DeepSeek-Coder::1.3B",
      "label": "DeepSeek-Coder 1.3B",
      "type": "Model",
      "props": {
        "nickname": "deepseek-coder-1.3b",
        "hf_repo": "deepseek-ai/deepseek-coder-1.3b-instruct"
      }
    },
    {
      "id": "model::DeepSeek-Coder::6.7B",
      "label": "DeepSeek-Coder 6.7B",
      "type": "Model",
      "props": {
        "nickname": "deepseek-coder-6.7b",
        "hf_repo": "deepseek-ai/deepseek-coder-6.7b-instruct"
      }
    },
    {
      "id": "model::Qwen2.5-Coder::1.5B",
      "label": "Qwen2.5-Coder 1.5B",
      "type": "Model",
      "props": {
        "nickname": "qwen2.5-coder-1.5b",
        "hf_repo": "Qwen/Qwen2.5-Coder-1.5B-Instruct"
      }
    },
    {
      "id": "model::StarCoder2::3B",
      "label": "StarCoder2 3B",
      "type": "Model",
      "props": {
        "nickname": "starcoder2-3b",
        "hf_repo": "bigcode/starcoder2-3b"
      }
    },
    {
      "id": "model::Phi-3::3.8B",
      "label": "Phi-3 3.8B",
      "type": "Model",
      "props": {
        "nickname": "phi-3-mini",
        "hf_repo": "microsoft/Phi-3-mini-128k-instruct"
      }
    },
    {
      "id": "issue::pytorch/pytorch#160281",
      "label": "pytorch/pytorch#160281",
      "type": "Issue",
      "props": {
        "title": "Improve CUDAGraph Tree heuristics on starting new generation",
        "url": "https://github.com/pytorch/pytorch/issues/160281",
        "state": "open",
        "type": "other",
        "created_at": "2025-08-10T22:05:56Z",
        "updated_at": "2025-08-10T22:06:27Z",
        "labels": [
          "triaged",
          "module: cuda graphs",
          "oncall: pt2",
          "module: inductor"
        ]
      }
    },
    {
      "id": "answer::deepseek-coder-1.3b::pytorch/pytorch#160281",
      "label": "Answer by deepseek-coder-1.3b on #160281",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::deepseek-coder-6.7b::pytorch/pytorch#160281",
      "label": "Answer by deepseek-coder-6.7b on #160281",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160281",
      "label": "Answer by qwen2.5-coder-1.5b on #160281",
      "type": "Answer",
      "props": {
        "text": "Category: Performance Optimization\n\nNext Steps:\n- Investigate the specific cause of the error by examining the stack trace.\n- Ensure that the `torch.compile` function is correctly used with the appropriate mode (`\"reduce-overhead\"`).\n- Verify that the input data types and shapes are compatible with the compiled functions.\n- Consider using different modes or configurations for `torch.compile` to see if they improve performance.\n- Check for any potential conflicts or issues with other parts of your codebase that might be affecting the compilation process.\n\nReferences:\n- [PyTorch Documentation - torch.compile](https://pytorch.org/docs/stable/generated/torch.compile.html)\n- [PyTorch Documentation - CUDAGraph Trees](https://pytorch.org/docs/stable/autograd/cudagraph-trees.html)"
      }
    },
    {
      "id": "answer::starcoder2-3b::pytorch/pytorch#160281",
      "label": "Answer by starcoder2-3b on #160281",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::phi-3-mini::pytorch/pytorch#160281",
      "label": "Answer by phi-3-mini on #160281",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "issue::pytorch/pytorch#160273",
      "label": "pytorch/pytorch#160273",
      "type": "Issue",
      "props": {
        "title": "[Documentation Clarity] torch.min/torch.max gradient behavior",
        "url": "https://github.com/pytorch/pytorch/issues/160273",
        "state": "open",
        "type": "docs",
        "created_at": "2025-08-10T13:11:48Z",
        "updated_at": "2025-08-10T17:05:35Z",
        "labels": [
          "module: docs",
          "triaged",
          "actionable",
          "module: python frontend"
        ]
      }
    },
    {
      "id": "answer::deepseek-coder-1.3b::pytorch/pytorch#160273",
      "label": "Answer by deepseek-coder-1.3b on #160273",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::deepseek-coder-6.7b::pytorch/pytorch#160273",
      "label": "Answer by deepseek-coder-6.7b on #160273",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160273",
      "label": "Answer by qwen2.5-coder-1.5b on #160273",
      "type": "Answer",
      "props": {
        "text": "### Next Steps\n\n1. **Update Documentation**: Add detailed explanations for the gradient behavior of `torch.min` and `torch.max`.\n2. **Implement Gradient Propagation**: Ensure that the gradient propagation logic aligns with the described behaviors.\n3. **Testing**: Perform comprehensive testing to verify the correctness of the updated gradient behavior.\n\n### Category\n\nDocumentation Improvement\n\n### Relevant References\n\n- [PyTorch Documentation](https://pytorch.org/docs/stable/index.html)\n\n### Additional Notes\n\n- The current implementation of `torch.min` and `torch.max` does not explicitly state their gradient behavior. This discrepancy needs to be addressed to ensure consistency and clarity in the documentation.\n- The proposed solution involves updating the documentation to include clear explanations of how these functions handle gradients, especially for multi-dimensional inputs and specific axes."
      }
    },
    {
      "id": "answer::starcoder2-3b::pytorch/pytorch#160273",
      "label": "Answer by starcoder2-3b on #160273",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::phi-3-mini::pytorch/pytorch#160273",
      "label": "Answer by phi-3-mini on #160273",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "issue::pytorch/pytorch#160272",
      "label": "pytorch/pytorch#160272",
      "type": "Issue",
      "props": {
        "title": "Add Green Context Support for fsdp2",
        "url": "https://github.com/pytorch/pytorch/issues/160272",
        "state": "open",
        "type": "feature",
        "created_at": "2025-08-10T12:26:56Z",
        "updated_at": "2025-08-10T15:04:57Z",
        "labels": [
          "oncall: distributed"
        ]
      }
    },
    {
      "id": "answer::deepseek-coder-1.3b::pytorch/pytorch#160272",
      "label": "Answer by deepseek-coder-1.3b on #160272",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::deepseek-coder-6.7b::pytorch/pytorch#160272",
      "label": "Answer by deepseek-coder-6.7b on #160272",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160272",
      "label": "Answer by qwen2.5-coder-1.5b on #160272",
      "type": "Answer",
      "props": {
        "text": "### Feature Request/RFC\n\n**Scope & Rationale**\nThe proposed feature introduces CUDA Green Context support for `fsdp2`, which aims to improve the performance of PyTorch's data parallelism by providing isolated SM resources for computation and communication. This is particularly useful when dealing with high-throughput workloads where overlapping computation and communication can lead to degraded performance.\n\n**Minimal API or Design Sketch**\nTo implement CUDA Green Context support in `fsdp2`, we need to modify the existing codebase to include the necessary functionality. Hereâ€™s a simplified design sketch:\n\n1. **Context Management**: Create two contexts: one for computation (`computation_context`) and one for communication (`communication_context`).\n2. **Stream Creation**: For each operation, create a stream from the appropriate context.\n3. **Stream Assignment**: In `pre_forward` and `forward` hooks, assign the correct stream based on whether the operation involves computation or communication.\n4. **Back-compat Considerations**: Ensure that the new implementation does not break existing functionality and provides a smooth transition path.\n5. **Implementation Plan**: Implement the above changes in the relevant files and modules within `torch/distributed/fsdp`.\n6. **Test Strategy**: Write unit tests to verify that the new implementation works correctly and does not introduce any regressions. Additionally, write integration tests to ensure that the feature integrates seamlessly with other parts of the PyTorch ecosystem.\n\n**Short-term Workaround if Not Implemented**\nIf the feature is not implemented, a short-term workaround could be to disable CUDA Green Context support temporarily or to use a different approach to handle overlapping computation and communication.\n\n### Conclusion\nThis RFC outlines the scope and rationale for adding CUDA Green Context support to `fsdp2`. It provides a detailed design sketch, back-compat considerations, implementation plan, and test strategy. The goal is to ensure that the feature is implemented in a way that minimizes disruption to existing functionality and provides a seamless user experience."
      }
    },
    {
      "id": "answer::starcoder2-3b::pytorch/pytorch#160272",
      "label": "Answer by starcoder2-3b on #160272",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::phi-3-mini::pytorch/pytorch#160272",
      "label": "Answer by phi-3-mini on #160272",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "issue::pytorch/pytorch#160271",
      "label": "pytorch/pytorch#160271",
      "type": "Issue",
      "props": {
        "title": "Error when using torch.compile with dynamic=True: tensor 'guidance' stride mismatch at index 0",
        "url": "https://github.com/pytorch/pytorch/issues/160271",
        "state": "open",
        "type": "other",
        "created_at": "2025-08-10T12:17:40Z",
        "updated_at": "2025-08-10T12:18:56Z",
        "labels": [
          "oncall: pt2"
        ]
      }
    },
    {
      "id": "answer::deepseek-coder-1.3b::pytorch/pytorch#160271",
      "label": "Answer by deepseek-coder-1.3b on #160271",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::deepseek-coder-6.7b::pytorch/pytorch#160271",
      "label": "Answer by deepseek-coder-6.7b on #160271",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160271",
      "label": "Answer by qwen2.5-coder-1.5b on #160271",
      "type": "Answer",
      "props": {
        "text": "### Category: Performance Optimization\n\n### Next Steps:\n1. **Check Tensor Shapes**: Ensure that the shapes of tensors involved in the `forward` method match. The error message indicates that there's a mismatch in the shape of the `guidance` tensor at index 0.\n2. **Review Transformer Code**: Examine the `transformer` module in the `diffusers.models.transformers` directory for any potential issues related to tensor strides or dimensions.\n3. **Update Dependencies**: Ensure that all dependencies are up-to-date. Sometimes, bugs are fixed in newer versions of libraries.\n4. **Debugging**: Use `torch.autograd.set_detect_anomaly(True)` to enable anomaly detection during training, which can help identify where the issue lies.\n\n### Relevant References:\n- [PyTorch Documentation](https://pytorch.org/docs/stable/index.html)\n- [Dynamo Documentation](https://pytorch.org/docs/stable/dynamo.html)\n- [Diffusers Documentation](https://huggingface.co/docs/diffusers/en/main)\n\nBy following these steps, you should be able to resolve the `tensor 'guidance' stride mismatch at index 0` error and improve the performance of your model."
      }
    },
    {
      "id": "answer::starcoder2-3b::pytorch/pytorch#160271",
      "label": "Answer by starcoder2-3b on #160271",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::phi-3-mini::pytorch/pytorch#160271",
      "label": "Answer by phi-3-mini on #160271",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "issue::pytorch/pytorch#160269",
      "label": "pytorch/pytorch#160269",
      "type": "Issue",
      "props": {
        "title": "Questions about Volta Support",
        "url": "https://github.com/pytorch/pytorch/issues/160269",
        "state": "open",
        "type": "other",
        "created_at": "2025-08-10T10:19:34Z",
        "updated_at": "2025-08-10T12:15:35Z",
        "labels": [
          "module: docs",
          "oncall: releng",
          "triaged"
        ]
      }
    },
    {
      "id": "answer::deepseek-coder-1.3b::pytorch/pytorch#160269",
      "label": "Answer by deepseek-coder-1.3b on #160269",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::deepseek-coder-6.7b::pytorch/pytorch#160269",
      "label": "Answer by deepseek-coder-6.7b on #160269",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160269",
      "label": "Answer by qwen2.5-coder-1.5b on #160269",
      "type": "Answer",
      "props": {
        "text": "**Category:** Documentation\n\n**Next Steps:**\n1. Review the documentation on the official PyTorch website or GitHub repository to ensure that the information is up-to-date.\n2. Check if there are any updates or changes in the release notes since the last update.\n3. If the documentation still does not mention Volta support, consider reaching out to the PyTorch community or maintainers for further clarification.\n\n**Relevant References:**\n- [PyTorch Release Notes](https://pytorch.org/docs/stable/releasenotes/index.html)\n- [Pull Request #157968](https://github.com/pytorch/pytorch/pull/157968)"
      }
    },
    {
      "id": "answer::starcoder2-3b::pytorch/pytorch#160269",
      "label": "Answer by starcoder2-3b on #160269",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::phi-3-mini::pytorch/pytorch#160269",
      "label": "Answer by phi-3-mini on #160269",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "issue::pytorch/pytorch#160265",
      "label": "pytorch/pytorch#160265",
      "type": "Issue",
      "props": {
        "title": "XPU out of memory on Intel iGPUs although plenty of memory is available per error message.",
        "url": "https://github.com/pytorch/pytorch/issues/160265",
        "state": "open",
        "type": "other",
        "created_at": "2025-08-10T07:38:24Z",
        "updated_at": "2025-08-10T12:13:55Z",
        "labels": [
          "triaged",
          "module: xpu"
        ]
      }
    },
    {
      "id": "answer::deepseek-coder-1.3b::pytorch/pytorch#160265",
      "label": "Answer by deepseek-coder-1.3b on #160265",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::deepseek-coder-6.7b::pytorch/pytorch#160265",
      "label": "Answer by deepseek-coder-6.7b on #160265",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160265",
      "label": "Answer by qwen2.5-coder-1.5b on #160265",
      "type": "Answer",
      "props": {
        "text": "**Category:** Performance Issues\n\n**Next Steps:**\n1. **Check System Resources:** Ensure your system has sufficient VRAM (Virtual Graphics Memory) available for the GPU. You can check this by running `nvidia-smi` on Linux or `vraminfo` on macOS.\n2. **Update PyTorch and CUDA:** Make sure you are using the latest versions of PyTorch and CUDA. Sometimes, bugs are fixed in newer releases.\n3. **Use `empty_cache()`:** If the issue persists, try calling `model.empty_cache()` before running your model again. This will free up any unused memory.\n4. **Profile Your Code:** Use profiling tools like `torch.cuda.memory_profiler` to identify where memory is being allocated and released.\n5. **Report Issue:** If the problem persists, consider reporting the issue on the PyTorch GitHub repository along with detailed information about your hardware configuration and the steps you took to reproduce the issue.\n\n**Relevant References:**\n- [PyTorch Documentation](https://pytorch.org/docs/stable/index.html)\n- [NVIDIA GPU Information](https://developer.nvidia.com/gpu-info)\n- [CUDA Profiling Tools](https://docs.nvidia.com/cuda/profiler/)"
      }
    },
    {
      "id": "answer::starcoder2-3b::pytorch/pytorch#160265",
      "label": "Answer by starcoder2-3b on #160265",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    },
    {
      "id": "answer::phi-3-mini::pytorch/pytorch#160265",
      "label": "Answer by phi-3-mini on #160265",
      "type": "Answer",
      "props": {
        "text": "[MODEL ERROR] All attempts failed (text/chat). Check model task support or rate limits."
      }
    }
  ],
  "edges": [
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "answer::deepseek-coder-1.3b::pytorch/pytorch#160281",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-1.3b::pytorch/pytorch#160281",
      "to": "issue::pytorch/pytorch#160281",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "issue::pytorch/pytorch#160281",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "answer::deepseek-coder-6.7b::pytorch/pytorch#160281",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-6.7b::pytorch/pytorch#160281",
      "to": "issue::pytorch/pytorch#160281",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "issue::pytorch/pytorch#160281",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160281",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160281",
      "to": "issue::pytorch/pytorch#160281",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "issue::pytorch/pytorch#160281",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "answer::starcoder2-3b::pytorch/pytorch#160281",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::starcoder2-3b::pytorch/pytorch#160281",
      "to": "issue::pytorch/pytorch#160281",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "issue::pytorch/pytorch#160281",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "answer::phi-3-mini::pytorch/pytorch#160281",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::phi-3-mini::pytorch/pytorch#160281",
      "to": "issue::pytorch/pytorch#160281",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "issue::pytorch/pytorch#160281",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "answer::deepseek-coder-1.3b::pytorch/pytorch#160273",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-1.3b::pytorch/pytorch#160273",
      "to": "issue::pytorch/pytorch#160273",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "issue::pytorch/pytorch#160273",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "answer::deepseek-coder-6.7b::pytorch/pytorch#160273",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-6.7b::pytorch/pytorch#160273",
      "to": "issue::pytorch/pytorch#160273",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "issue::pytorch/pytorch#160273",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160273",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160273",
      "to": "issue::pytorch/pytorch#160273",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "issue::pytorch/pytorch#160273",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "answer::starcoder2-3b::pytorch/pytorch#160273",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::starcoder2-3b::pytorch/pytorch#160273",
      "to": "issue::pytorch/pytorch#160273",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "issue::pytorch/pytorch#160273",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "answer::phi-3-mini::pytorch/pytorch#160273",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::phi-3-mini::pytorch/pytorch#160273",
      "to": "issue::pytorch/pytorch#160273",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "issue::pytorch/pytorch#160273",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "answer::deepseek-coder-1.3b::pytorch/pytorch#160272",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-1.3b::pytorch/pytorch#160272",
      "to": "issue::pytorch/pytorch#160272",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "issue::pytorch/pytorch#160272",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "answer::deepseek-coder-6.7b::pytorch/pytorch#160272",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-6.7b::pytorch/pytorch#160272",
      "to": "issue::pytorch/pytorch#160272",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "issue::pytorch/pytorch#160272",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160272",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160272",
      "to": "issue::pytorch/pytorch#160272",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "issue::pytorch/pytorch#160272",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "answer::starcoder2-3b::pytorch/pytorch#160272",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::starcoder2-3b::pytorch/pytorch#160272",
      "to": "issue::pytorch/pytorch#160272",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "issue::pytorch/pytorch#160272",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "answer::phi-3-mini::pytorch/pytorch#160272",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::phi-3-mini::pytorch/pytorch#160272",
      "to": "issue::pytorch/pytorch#160272",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "issue::pytorch/pytorch#160272",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "answer::deepseek-coder-1.3b::pytorch/pytorch#160271",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-1.3b::pytorch/pytorch#160271",
      "to": "issue::pytorch/pytorch#160271",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "issue::pytorch/pytorch#160271",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "answer::deepseek-coder-6.7b::pytorch/pytorch#160271",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-6.7b::pytorch/pytorch#160271",
      "to": "issue::pytorch/pytorch#160271",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "issue::pytorch/pytorch#160271",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160271",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160271",
      "to": "issue::pytorch/pytorch#160271",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "issue::pytorch/pytorch#160271",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "answer::starcoder2-3b::pytorch/pytorch#160271",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::starcoder2-3b::pytorch/pytorch#160271",
      "to": "issue::pytorch/pytorch#160271",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "issue::pytorch/pytorch#160271",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "answer::phi-3-mini::pytorch/pytorch#160271",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::phi-3-mini::pytorch/pytorch#160271",
      "to": "issue::pytorch/pytorch#160271",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "issue::pytorch/pytorch#160271",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "answer::deepseek-coder-1.3b::pytorch/pytorch#160269",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-1.3b::pytorch/pytorch#160269",
      "to": "issue::pytorch/pytorch#160269",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "issue::pytorch/pytorch#160269",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "answer::deepseek-coder-6.7b::pytorch/pytorch#160269",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-6.7b::pytorch/pytorch#160269",
      "to": "issue::pytorch/pytorch#160269",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "issue::pytorch/pytorch#160269",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160269",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160269",
      "to": "issue::pytorch/pytorch#160269",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "issue::pytorch/pytorch#160269",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "answer::starcoder2-3b::pytorch/pytorch#160269",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::starcoder2-3b::pytorch/pytorch#160269",
      "to": "issue::pytorch/pytorch#160269",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "issue::pytorch/pytorch#160269",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "answer::phi-3-mini::pytorch/pytorch#160269",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::phi-3-mini::pytorch/pytorch#160269",
      "to": "issue::pytorch/pytorch#160269",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "issue::pytorch/pytorch#160269",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "answer::deepseek-coder-1.3b::pytorch/pytorch#160265",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-1.3b::pytorch/pytorch#160265",
      "to": "issue::pytorch/pytorch#160265",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::1.3B",
      "to": "issue::pytorch/pytorch#160265",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "answer::deepseek-coder-6.7b::pytorch/pytorch#160265",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::deepseek-coder-6.7b::pytorch/pytorch#160265",
      "to": "issue::pytorch/pytorch#160265",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::DeepSeek-Coder::6.7B",
      "to": "issue::pytorch/pytorch#160265",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160265",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::qwen2.5-coder-1.5b::pytorch/pytorch#160265",
      "to": "issue::pytorch/pytorch#160265",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Qwen2.5-Coder::1.5B",
      "to": "issue::pytorch/pytorch#160265",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "answer::starcoder2-3b::pytorch/pytorch#160265",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::starcoder2-3b::pytorch/pytorch#160265",
      "to": "issue::pytorch/pytorch#160265",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::StarCoder2::3B",
      "to": "issue::pytorch/pytorch#160265",
      "type": "answered",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "answer::phi-3-mini::pytorch/pytorch#160265",
      "type": "produced",
      "props": {}
    },
    {
      "from": "answer::phi-3-mini::pytorch/pytorch#160265",
      "to": "issue::pytorch/pytorch#160265",
      "type": "about",
      "props": {}
    },
    {
      "from": "model::Phi-3::3.8B",
      "to": "issue::pytorch/pytorch#160265",
      "type": "answered",
      "props": {}
    }
  ]
}